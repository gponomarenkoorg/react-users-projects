{"version":3,"sources":["api/api.js","components/RepoList/RepoList.jsx","components/User/User.jsx","components/UserDetails/UserDetails.jsx","components/UsersList/UsersList.jsx","App.js","index.js"],"names":["request","url","a","fetch","response","ok","Error","statusText","json","serverResponse","data","message","RepoList","repos","selectedLogin","isUserSelected","useState","queryRepo","setInputRepo","filteredRepos","filter","repo","name","includes","className","type","placeholder","value","onChange","event","target","aria-label","aria-describedby","id","map","cn","active","key","onClick","window","open","forks_count","stargazers_count","User","clearUser","user","setUser","setRepos","userError","setUserError","error","setError","isLoading","setIsLoading","useEffect","loadedUser","loadUser","loadedRepos","loadRepos","length","role","src","avatar_url","alt","login","email","location","created_at","slice","followers","following","bio","UserDetails","number","setNumber","public_repos","UsersList","users","selectUser","queryUser","setInputUser","filteredUsers","App","setUsers","setLogin","setUserSelected","selectedUser","loadedUsers","loadUsers","userLogin","find","selectLogin","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81493362.chunk.js","sourcesContent":["const BASE_URL = 'https://api.github.com';\n\nexport const request = async(url) => {\n  try {\n    const response = await fetch(`${BASE_URL}${url}`);\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    const serverResponse = await response.json();\n\n    return serverResponse.data || serverResponse;\n  } catch (error) {\n    throw new Error(`Server error: ${error.message}`);\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport './RepoList.scss';\n\nexport const RepoList = ({ repos, selectedLogin, isUserSelected }) => {\n  const [queryRepo, setInputRepo] = useState('');\n  const filteredRepos = repos.filter(repo => repo.name.includes(queryRepo));\n  const handleQueryRepo = (event) => {\n    setInputRepo(event.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            name=\"queryRepo\"\n            placeholder=\"Search for Repos\"\n            value={queryRepo}\n            onChange={handleQueryRepo}\n            aria-label=\"Recipient's username\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <span className=\"input-group-text\" id=\"basic-addon2\">\n              Find Repos\n            </span>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <h3>Repo List</h3>\n          {filteredRepos.map(repo => (\n            <div\n              className={cn({\n                'card mb-3 repo-block': true,\n                active: isUserSelected,\n              })}\n              key={repo.id}\n            >\n              <button\n                type=\"button\"\n                onClick={\n                  // eslint-disable-next-line max-len\n                  () => window.open(`https://github.com/${selectedLogin}/${repo.name}`, '_blank')\n                }\n              >\n                <div className=\"row no-gutters\">\n                  <div className=\"col-md-4 p-3\">\n                    <h5 className=\"card-title\">\n                      {`${repo.name}`}\n                    </h5>\n                  </div>\n                  <div className=\"col-md-8\">\n                    <div className=\"card-body\">\n                      <p className=\"card-text\">\n                        {`Forks: ${repo.forks_count}`}\n                      </p>\n                      <p className=\"card-text\">\n                        {`Stars: ${repo.stargazers_count}`}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </button>\n            </div>\n          ))\n          }\n        </div>\n      </div>\n    </>\n  );\n};\n\nRepoList.propTypes = {\n  repos: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  selectedLogin: PropTypes.string.isRequired,\n  isUserSelected: PropTypes.bool.isRequired,\n};\n","/* eslint-disable consistent-return */\nimport React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { request } from '../../api/api';\nimport { RepoList } from '../RepoList/RepoList';\n\nexport const User = ({\n  selectedLogin,\n  isUserSelected,\n  clearUser,\n}) => {\n  const [user, setUser] = useState(null);\n  const [repos, setRepos] = useState([]);\n  const [userError, setUserError] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const loadUser = async() => {\n      try {\n        const loadedUser = await request(`/users/${selectedLogin}`);\n\n        setUser(loadedUser);\n      } catch (errorUser) {\n        setUserError(`Loading repos error: ${errorUser.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUser();\n  }, [selectedLogin]);\n\n  useEffect(() => {\n    const loadRepos = async() => {\n      try {\n        const loadedRepos = await request(`/users/${selectedLogin}/repos`);\n\n        setRepos(loadedRepos);\n      } catch (errorRepos) {\n        setError(`Loading repos error: ${errorRepos.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadRepos();\n  }, [selectedLogin]);\n\n  if (!repos.length) {\n    return (\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"sr-only\">User&apos;s repos loading...</span>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"sr-only\">User&apos;s datas loading...</span>\n      </div>\n    );\n  }\n\n  if (userError) {\n    return (\n      <div className=\"alert alert-primary\" role=\"alert\">\n        <h1>{`Error: ${userError}`}</h1>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"alert alert-primary\" role=\"alert\">\n        <h1>{`Error: ${error}`}</h1>\n      </div>\n    );\n  }\n\n  if (repos.length) {\n    return (\n      <>\n        <h3>User details here</h3>\n        {!isUserSelected\n          ? (\n            <div className=\"alert alert-primary\" role=\"alert\">\n              <h1>User is not selected</h1>\n            </div>\n          )\n          : (\n            <>\n              <div>\n\n                <div className={cn({\n                  'card mb-3 user-block': true,\n                  active: isUserSelected,\n                })}\n                >\n                  <div className=\"row no-gutters\">\n                    <div className=\"col-md-4\">\n                      <img\n                        src={user.avatar_url}\n                        className=\"card-img\"\n                        alt=\"avatar\"\n                      />\n                    </div>\n                    <div className=\"col-md-8\">\n                      <div className=\"card-body\">\n                        <h5 className=\"card-title\">{user.login}</h5>\n                        <p className=\"card-text\">\n                          {user.email && `email ${user.email}`}\n                        </p>\n                        <p className=\"card-text\">\n                          {user.location && `location: ${user.location}`}\n                        </p>\n                        <p className=\"card-text\">\n                          {user.created_at\n                          && `Join Date: ${user.created_at.slice(0, 10)}`}\n                        </p>\n                        <p className=\"card-text\">\n                          {user.followers && `${user.followers} Followers`}\n                        </p>\n                        <p className=\"card-text\">\n                          {user.location && `Following ${user.following}`}\n                        </p>\n                        <div>\n                          <p className=\"card-text\">\n                            <small className=\"text-muted\">\n                              {user.bio && `User's biography: ${user.bio}`}\n                            </small>\n                          </p>\n                          <button\n                            type=\"button\"\n                            className=\"btn\"\n                            onClick={clearUser}\n                          >\n                            Clear\n                          </button>\n                        </div>\n\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <RepoList\n                  repos={repos}\n                  selectedLogin={selectedLogin}\n                  isUserSelected={isUserSelected}\n                />\n              </div>\n            </>\n          )\n        }\n      </>\n    );\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { request } from '../../api/api';\n\nexport const UserDetails = ({ login }) => {\n  const [number, setNumber] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadUser = async() => {\n      try {\n        const loadedUser = await request(`/users/${login}`);\n\n        setNumber(loadedUser.public_repos);\n      } catch (userError) {\n        setError(`Loading repos error: ${userError.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUser();\n  }, [login]);\n\n  if (isLoading) {\n    return (\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"alert alert-primary\" role=\"alert\">\n        <h1>{`Error: ${error}`}</h1>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {number}\n    </>\n  );\n};\n\nUserDetails.propTypes = {\n  login: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport './UsersList.scss';\nimport { UserDetails } from '../UserDetails';\n\nexport const UsersList = ({\n  users,\n  selectUser,\n  clearUser,\n  isUserSelected,\n}) => {\n  const [queryUser, setInputUser] = useState('');\n  const filteredUsers = users.filter(user => user.login.includes(queryUser));\n  const handleQueryUser = (event) => {\n    setInputUser(event.target.value);\n    clearUser();\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            name=\"queryUser\"\n            placeholder=\"Search for Users\"\n            value={queryUser}\n            onChange={handleQueryUser}\n            aria-label=\"Recipient's username\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <span className=\"input-group-text\" id=\"basic-addon2\">\n              Find User\n            </span>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <h3>Users List</h3>\n          {filteredUsers.map(user => (\n            <div\n              className={cn({\n                'card mb-3 user-block': true,\n                active: isUserSelected,\n              })}\n              key={user.id}\n            >\n              <button\n                type=\"button\"\n                onClick={() => selectUser(user.login)}\n              >\n                <div className=\"row no-gutters\">\n                  <div className=\"col-md-4\">\n                    <img\n                      src={user.avatar_url}\n                      className=\"card-img\"\n                      alt=\"avatar\"\n                    />\n                  </div>\n                  <div className=\"col-md-8\">\n                    <div className=\"card-body\">\n                      <h5 className=\"card-title\">{user.login}</h5>\n                      <p className=\"card-text\">\n                        <UserDetails login={user.login} />\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </button>\n            </div>\n          ))\n          }\n        </div>\n      </div>\n    </>\n  );\n};\n\nUsersList.propTypes = {\n  users: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  clearUser: PropTypes.func.isRequired,\n  isUserSelected: PropTypes.bool.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { request } from './api/api';\nimport './App.scss';\nimport { User } from './components/User';\nimport { UsersList } from './components/UsersList';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedLogin, setLogin] = useState('');\n  const [isUserSelected, setUserSelected] = useState(false);\n  const [selectedUser, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadUsers = async() => {\n      try {\n        setIsLoading(true);\n\n        const loadedUsers = await request('/users');\n\n        setUsers(loadedUsers);\n      } catch (errorUsers) {\n        setError(errorUsers.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUsers();\n  }, []);\n\n  const selectUser = (userLogin) => {\n    setLogin(userLogin);\n    setUserSelected(true);\n    setUser(users.find(user => user.login === userLogin));\n  };\n\n  const clearUser = () => {\n    setLogin('');\n    setUserSelected(false);\n    setUser(null);\n  };\n\n  if (isLoading) {\n    return (\n      <h1>Users list is loading...</h1>\n    );\n  }\n\n  if (error) {\n    return (\n      <h1>{`Error: ${error}`}</h1>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1>Users list</h1>\n          {!users.length\n            ? (\n              <p>\n                Users list is loading...\n              </p>\n            )\n            : (\n              <UsersList\n                users={users}\n                selectUser={selectUser}\n                isUserSelected={isUserSelected}\n                clearUser={clearUser}\n              />\n            )\n            }\n        </div>\n        <div className=\"col\">\n          {!isUserSelected\n            ? (\n              <div className=\"alert alert-primary\" role=\"alert\">\n                <h1>User is not selected</h1>\n              </div>\n            )\n            : (\n              <User\n                selectedLogin={selectedLogin}\n                selectLogin={setLogin}\n                isUserSelected={isUserSelected}\n                user={selectedUser}\n                selectUser={selectUser}\n                clearUser={clearUser}\n              />\n            )\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}